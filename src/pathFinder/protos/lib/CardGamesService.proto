syntax = "proto3";

package com.mpl.services.card.games.grpc;

option java_multiple_files = true;

import "UserDataService.proto";

message PointRummyAutoDebit{
    bool isAutoDebitDone  = 1;
    MoneyDetail moneyDetail = 2;
    string error = 3;
}

message Wallet{
    string totalCashBalance = 1;
    string ticketBalance = 2;
    string bonusBalance = 3;
    string depositBalance = 4;
    string winningsBalance = 5;
}

message MoneyDTO{
    string amount = 1;
    string currencyId = 2;
}

message MoneyDetail{
    enum CurrencyId {
        INR = 0;
        USD = 1;
    }
    string amount = 1;
    CurrencyId currencyId = 2;

}

message LobbyPlayerData {
    string battleId = 1;
    int32 userId = 2;
    int32 score = 3;
    string scoreData = 4;
    string status = 5;
    bool matched = 6;
    int32 rank = 7;
    MoneyDTO cashWinnings = 8;
    int32 tokenWinnings = 9;
    bool canPlayAgain = 10;
    bool followingOpponent = 11;
    double cashWinningsDecimal = 12;
    string nextLobbySuggestedConfig = 13;
    LobbyDetails nextSuggestedLobby = 14;
    double decimalScore = 15;
    string extraInfo = 16;
    MoneyDTO entryFee =17;
    string entryCurrency =18;
    string rewards = 19;
    bool isTicketUsed = 20;
    double ticketContribution = 21;
    string sessionId = 22;
    Wallet wallet = 23;
    int32 lobbyId = 24;
    int32 gameId = 25;
    string playState = 26;
    string battleState = 27;
    string createdOn = 28;
    string modifiedOn = 29;
    bool hasRummyWalletBalance = 30;
    PointRummyAutoDebit pointRummyAutoDebit = 31;
}

message UpsellReward {
    string gamesText = 1;
    string rewardText = 2 ;
    bool claimed = 3;
}

message UpsellOffer {
    string header = 1;
    string offerText = 2;
    string endTime = 3;
    string badgeText = 4;
    repeated UpsellReward rewards = 5;
    string progressText = 6;
    bool visible = 7;
    string imageUrl = 8;
    string extraInfo = 9;
    int32 entryFee = 10;
}

message TopRank {
    int32 userId = 1;
    string name = 2;
    int32 rank = 3;
    int32 score = 4;
    string avatar = 5;
    string tier = 6;
    bool isPro = 7;
    string location = 8;
    string acr = 9;
    string state = 10;
    uint64 lastOnline = 11;
    com.mpl.services.userdata.grpc.BasicProfile profile = 12;
}

message DynamicWinning{
    int32 playerCount =1;
    MoneyDTO cashWinning = 2;
    repeated double rankWinning = 3;
}

message RankRange {
    int32 start = 1;
    int32 end = 2;
    MoneyDTO cash = 3;
    int32 tokens = 4;
    string extReward = 5;
    repeated DynamicWinning dynamicWinnings = 6;
}

message Rewards {
    MoneyDTO totalCash = 1;
    int32 totalTokens = 2;
    repeated RankRange rankRanges = 3;
    int32 maxRanks = 4;
    int32 id = 5;
    string name = 6;
}

message FraudInfo{
    bool fraudDetected = 1;
    map<int32,string> userIdToFraudReasons = 8;
}

enum ReasonType{
    DATA_CORRUPTION = 0;
    INTERNAL_ERROR = 1;
    SCHEDULER_BASED_CANCEL = 2;
    FRAUD_DETECTION = 3;
}

message CancellationDetails{
    string source = 1;
    string reason = 2;
    ReasonType reasonType = 3;
}

// Start of models for all new card games - GIN/SPADES/CLUB9


message ActiveTableDetails{
    bool activeTablePresent = 1;
    string activeTableId = 2;
}

message AccountTransactionDetails{
    MoneyDetail deficit = 1;
    MoneyDetail totalCashDeduction = 2;
    MoneyDetail bonusDeduction = 3;
    MoneyDetail winningDeduction = 4;
    MoneyDetail depositDeduction = 5;
    MoneyDetail ticketDeduction = 6;
}

message CreateGameTablePlayerData {
    int32 userId = 1;
    bool success = 2;
    AccountTransactionDetails accountTransactionDetails = 3;
}

message UserScoreData{
    int32 userId = 1;
    double gameScore =2;

}

message TableUserData {
    string tableId = 1;
    string roundId = 2;
    int32 userId = 3;
    double gameScore = 4;
    int32 rank = 5;
    string playerState = 6;
    string tableState = 7;
    bool userEligibleForNextTable = 8;
    MoneyDetail cashWinnings = 9;
}

message CheckCardGamePlayerEligibilityRequest{
    int32 userId = 1;
    int32 lobbyId = 2;
    ActiveTableDetails activeTableDetails = 3;
    string requestId = 4;

}

message CheckCardGamePlayerEligibilityResponse{
    bool success = 1;
    bool playerEligible = 2;
    CardGamesError error = 3;
    string requestId = 4;
}

message CancelBattleRequest {
    string requestId = 1;
    string battleId = 2;
    int32 lobbyId = 3;
    string roundId = 4;
    CancellationDetails cancellationDetails = 5;
}

message CancelBattleResponse {
    string requestId = 1;
    bool isSuccess = 2;
    CardGamesError error = 3;
    repeated LobbyPlayerData playerData = 4;
    string battleStatus = 5;
    string sessionId = 6;
}

message CreateCardGameTableRequest {
    int32 lobbyId = 1;
    int32 gameId = 2;
    string gameTableId = 3;
    map<int32,string> userIdToSessionIds = 4;
    string requestId = 5;
}

message CreateCardGameTableResponse {
    CardGamesError error = 1;
    bool success = 2;
    repeated CreateGameTablePlayerData players = 3;
    string tableId = 4;
    string requestId = 5;
    FraudInfo fraudInfo = 6;
}

message UpdateCardGameTableRequest {
    int32 lobbyId = 1;
    string tableId = 2;
    string roundId = 3;
    repeated UserScoreData userScoreData = 4;
    string requestId = 5;
    string scoreData = 6;
}

message UpdateCardGameTableResponse {
    CardGamesError error = 1;
    bool success = 2;
    repeated TableUserData userData = 3;
    string requestId = 4;
}

message VerifyCardGamePlayerEligibilityRequest{
    int32 userId = 1;
    int32 lobbyId = 2;
    ActiveTableDetails activeTableDetails = 3;
    string flowType = 4; // SIGN_UP,INSTANT_DEBIT_VALIDATION
}

message FinishCardGameTableRequest{
    int32 lobbyId = 1;
    string roundId = 2;
    string tableId = 3;
    repeated UserScoreData userScoreData = 4;
    string requestId = 5;
    string scoreData = 6;
}

message FinishCardGameTableResponse{
    bool success = 1;
    repeated TableUserData userData = 2;
    CardGamesError error = 3;
    string requestId = 4;
    FraudInfo fraudInfo = 5;
}

message LobbyDetails {
    int32 id = 1;
    string name = 2;
    string description = 3;
    int32 configId = 4;
    string startTime = 5;
    string activeEndTime = 6;
    string endTime = 7;
    int32 gameId = 8;
    string gameConfig = 9;
    string currencyType = 10;
    MoneyDTO entryFee = 11;
    string rewards = 12;
    string lobbyStatus = 13;
    bool active = 14;
    string extraInfo = 15;
    string createdOn = 16;
    string modifiedOn = 17;
    int32 registeredUsers = 18;
    int32 activeUsers = 19;
    string chatChannel = 20;
    int32 minPlayers = 22;
    int32 maxPlayers = 23;
    bool userRegistered = 24;
    string gameConfigName = 25;
    string gameName = 26;
    string style = 27;
    Rewards specialRewards = 28;
    bool battlePlayAgainDisabled = 29;
    string imageUrl = 30;
    bool applyBonusLimit = 31;
    MoneyDTO bonusLimit = 32;
    repeated TopRank topRanks = 33;
    string gameIcon = 34;
    UpsellOffer upsellOffer = 35;
}

message GetLobbyDetailsByIdRequest{
    string requestId = 1;
    int32 lobbyId = 2;
}

message GetLobbyDetailsByIdResponse{
    string requestId = 1;
    bool isSuccess = 2;
    CardGamesError error = 3;
    LobbyDetails lobbyDetails = 4;
}

message DropUserForGameTableResponse{
    string requestId = 1;
    CardGamesError error = 2;
    bool success = 3;
}

message VerifyCardGamePlayerEligibilityResponse{
    bool success = 1;
    bool playerEligible = 2;
    CardGamesError error = 3;
}

message CardGamesError {
    enum Reason {
        NONE = 0;
        UNKNOWN = 1;
        BAD_REQUEST = 2;
        INTERNAL_ERROR = 3;
        EXTERNAL_ERROR = 4;
        INSUFFICIENT_FUNDS = 5;
        LOBBY_ENDED = 6;
        VIOLATED_THE_FRAUD_RULES =7;
        UNAUTHORIZED = 8;
        DUPLICATE = 9;
        APP_LEVEL_USER_BLOCKED = 10;
        COLLUSION_DETECTED = 11;
        LOBBY_NOT_FOUND = 12;
        USER_DATA_NOT_FOUND = 13;
        USER_NOT_ELIGIBLE = 14;
        RUMMY_WALLET_NOT_FOUND = 15;
        USER_EXITED_RUMMY_TOURNAMENT = 16;
        FRAUD_DETECTED = 17;
    }
    Reason reason = 1;
    string message = 2;
}

message DropUserForGameTableRequest{
    string requestId = 1;
    int32 userId = 2;
    string battleId = 3;
    int32 lobbyId = 4;
}

message SendInstrumentationEventRequest {
    string requestId = 1;
    string eventData = 2;
}

message SendInstrumentationEventResponse{
    string requestId = 1;
    bool isSuccess = 2;
    CardGamesError error = 3;
}

service CardGamesService {
    rpc cancelBattle(CancelBattleRequest) returns (CancelBattleResponse);
    
    // For all new card games - GIN/SPADES/CLUB9
    rpc checkPlayerEligibility(CheckCardGamePlayerEligibilityRequest) returns (CheckCardGamePlayerEligibilityResponse);
    rpc createCardGameTable(CreateCardGameTableRequest) returns (CreateCardGameTableResponse);
    rpc updateCardGameTable(UpdateCardGameTableRequest) returns (UpdateCardGameTableResponse);
    rpc finishCardGameTable(FinishCardGameTableRequest) returns (FinishCardGameTableResponse);    

    rpc getLobbyDetailsById(GetLobbyDetailsByIdRequest) returns (GetLobbyDetailsByIdResponse);
    rpc dropUserForGameTable (DropUserForGameTableRequest) returns (DropUserForGameTableResponse);

    // For Game server instrumentation
    rpc sendInstrumentationEvent(SendInstrumentationEventRequest) returns (SendInstrumentationEventResponse);
}
